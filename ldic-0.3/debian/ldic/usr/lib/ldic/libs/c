< c programming language dictionarys >

## Copyright: anonymouse (사용자 모두가 변조및 참조 이용 가능)
## License: GPL-2.0+

## basic
#include <stdlib.h> ## basic
int main()	## basic
{
	printf();	## basic
    return 0;	## basic
}


-- OPENGL         #ldic-opengl구현
필요 패키지 sudo apt-get install freeglut3 freeglut3-dbg freeglut3-dev       #ldic-opengl구현
#include <GL/glut.h> // opengl 라이브러리를 임포트 한다.       #ldic-opengl구현
       #ldic-opengl구현
void play_display() // 생성할 o-- OPENGL         #ldic-opengl구현
필요 패키지 sudo apt-get install freeglut3 freeglut3-dbg freeglut3-dev       #ldic-opengl구현
#include <GL/glut.h> // opengl 라이브러리를 임포트 한다.       #ldic-opengl구현
       #ldic-opengl구현
void play_display() // 생성할 opengl source를 설계한다. (실제 도형 및 그림 설계 )       #ldic-opengl구현
{       #ldic-opengl구현
       #ldic-opengl구현
       #ldic-opengl구현
 glClear(GL_COLOR_BUFFER_BIT);       #ldic-opengl구현
 glBegin(GL_TRIANGLES);       #ldic-opengl구현
          #ldic-opengl구현
 glVertex2f(0.5, 0.5);       #ldic-opengl구현
 glVertex2f(-0.5, 0.5);       #ldic-opengl구현
 glVertex2f(0.5, -0.5);       #ldic-opengl구현
 glEnd();       #ldic-opengl구현
glFlush();       #ldic-opengl구현
}       #ldic-opengl구현
void wincolor() { // 생성될 glut 디스플레이의 배경색을 결정할 함수를 설계 한다.       #ldic-opengl구현
    glClearColor(0.0f, 1.0f, 0.0f, 1.0f);       #ldic-opengl구현
}       #ldic-opengl구현
       #ldic-opengl구현
int main(int argc, char** argv) {       #ldic-opengl구현
    glutInit(&argc, argv); // glut 시작시 가장 먼저 포함되어야 할 중요한 함수 선언        #ldic-opengl구현
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGBA); // 생성될 glut 디스플레이의 모드        #ldic-opengl구현
    glutInitWindowPosition(5,5); // 생성될 glut 디스플레이의 위치       #ldic-opengl구현
    glutInitWindowSize(700, 700); // 생성될 glut 디스플레이의 사이즈       #ldic-opengl구현
    glutCreateWindow("sample"); // 생성될 glut 디스플레이의 이름 선언       #ldic-opengl구현
       #ldic-opengl구현
    wincolor(); // 설계한 배경색 함수를 호출 한다.       #ldic-opengl구현
    glutDisplayFunc(play_display); // 설계한 opengl source를 호출한다.       #ldic-opengl구현
    glutMainLoop(); // main함수의 전체 glut 소스 명령을 실행한다.       #ldic-opengl구현
       #ldic-opengl구현
    return 0;       #ldic-opengl구현
}       #ldic-opengl구현
--       #ldic-opengl구현pengl source를 설계한다. (실제 도형 및 그림 설계 )       #ldic-opengl구현
{       #ldic-opengl구현
       #ldic-opengl구현
       #ldic-opengl구현
 glClear(GL_COLOR_BUFFER_BIT);       #ldic-opengl구현
 glBegin(GL_TRIANGLES);       #ldic-opengl구현
          #ldic-opengl구현
 glVertex2f(0.5, 0.5);       #ldic-opengl구현
 glVertex2f(-0.5, 0.5);       #ldic-opengl구현
 glVertex2f(0.5, -0.5);       #ldic-opengl구현
 glEnd();       #ldic-opengl구현
glFlush();       #ldic-opengl구현
}       #ldic-opengl구현
void wincolor() { // 생성될 glut 디스플레이의 배경색을 결정할 함수를 설계 한다.       #ldic-opengl구현
    glClearColor(0.0f, 1.0f, 0.0f, 1.0f);       #ldic-opengl구현
}       #ldic-opengl구현
       #ldic-opengl구현
int main(int argc, char** argv) {       #ldic-opengl구현
    glutInit(&argc, argv); // glut 시작시 가장 먼저 포함되어야 할 중요한 함수 선언        #ldic-opengl구현
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGBA); // 생성될 glut 디스플레이의 모드        #ldic-opengl구현
    glutInitWindowPosition(5,5); // 생성될 glut 디스플레이의 위치       #ldic-opengl구현
    glutInitWindowSize(700, 700); // 생성될 glut 디스플레이의 사이즈       #ldic-opengl구현
    glutCreateWindow("sample"); // 생성될 glut 디스플레이의 이름 선언       #ldic-opengl구현
       #ldic-opengl구현
    wincolor(); // 설계한 배경색 함수를 호출 한다.       #ldic-opengl구현
    glutDisplayFunc(play_display); // 설계한 opengl source를 호출한다.       #ldic-opengl구현
    glutMainLoop(); // main함수의 전체 glut 소스 명령을 실행한다.       #ldic-opengl구현
       #ldic-opengl구현
    return 0;       #ldic-opengl구현
}       #ldic-opengl구현
--       #ldic-opengl구현

-- inotify
#include <string.h>              #ldic-inotify구현
#include <stdio.h>              #ldic-inotify구현
#include <stdlib.h>              #ldic-inotify구현
#include <errno.h>              #ldic-inotify구현
#include <sys/types.h>              #ldic-inotify구현
#include <sys/inotify.h>              #ldic-inotify구현
#include <unistd.h>              #ldic-inotify구현
#include <setjmp.h>              #ldic-inotify구현
              #ldic-inotify구현
#define _Event_		( sizeof (struct inotify_event) )	/* Inotify 함수의 이벤트 처리를 위한 전처리 지정 */              #ldic-inotify구현
#define Buffer_size	( 1024 * ( _Event_ + 64 ) )              #ldic-inotify구현
              #ldic-inotify구현
jmp_buf point;	/* setjmp 모듈을 활용할 변수 지정 */              #ldic-inotify구현
              #ldic-inotify구현
int main( int argc, char **argv ) {              #ldic-inotify구현
	setjmp(point);	/* setjmp 함수 당 포인트를 셋팅 한다. */              #ldic-inotify구현
	FILE *Write_file;	/* 로그 파일을 기록하기 위한 변수 선언 */              #ldic-inotify구현
              #ldic-inotify구현
	char Fs_Path[4092]; /* 감시할 파일 경로를 입력받을 변수 */              #ldic-inotify구현
	strcpy(Fs_Path, argv[1]);              #ldic-inotify구현
	              #ldic-inotify구현
	int ii;		/* 각 버퍼 사이즈 비교 대입 값을 위한 변수 */              #ldic-inotify구현
	              #ldic-inotify구현
	int Inotify_Buff; /* inotify 함수를 대입할 고정 버퍼값을 위한 변수 */              #ldic-inotify구현
	              #ldic-inotify구현
	char buffer[Buffer_size];	              #ldic-inotify구현
	              #ldic-inotify구현
	ii = inotify_init();	/* inotify 모듈을 초기화 로드 한다. */              #ldic-inotify구현
	              #ldic-inotify구현
int Back_Target() {              #ldic-inotify구현
		char cpcon[2048] = "cp -rf ", bakpath[] = " /tmp/bak_path"; 	/* 파일 백업을 만들 변수 */              #ldic-inotify구현
		system("rm -rf /tmp/bak_path");              #ldic-inotify구현
		strcat(cpcon, Fs_Path);              #ldic-inotify구현
		strcat(cpcon, bakpath);              #ldic-inotify구현
		system(cpcon); /* 타겟 파일 백업을 만든다. */              #ldic-inotify구현
	}              #ldic-inotify구현
int syscon() {		/* 이벤트 발생시 해당 파일을 복원할 파일 시스템 제어 기초 함수 설계 */               #ldic-inotify구현
		              #ldic-inotify구현
		/* 시작 기존의 백업 파일을 삭제 */              #ldic-inotify구현
		              #ldic-inotify구현
		char Remove_Target[2048] = ("rm -rf ");		              #ldic-inotify구현
		strcat(Remove_Target, Fs_Path);              #ldic-inotify구현
		system(Remove_Target);              #ldic-inotify구현
		              #ldic-inotify구현
		/* 완료 기존의 백업 파일을 삭제 */              #ldic-inotify구현
		              #ldic-inotify구현
		/* 시작 변동시 복원을 위한 작업 */              #ldic-inotify구현
		              #ldic-inotify구현
		char Restore[2048] = "cp -rf /tmp/bak_path ";              #ldic-inotify구현
		strcat(Restore, Fs_Path);              #ldic-inotify구현
		system(Restore);              #ldic-inotify구현
		              #ldic-inotify구현
		/* 완료 변동시 복원을 위한 작업 */              #ldic-inotify구현
		              #ldic-inotify구현
		/* 시작 작업 내용 출력 및 시작 로그 기록 */               #ldic-inotify구현
		              #ldic-inotify구현
		Write_file = fopen("dfs.log", "a");              #ldic-inotify구현
		fprintf(stderr,"\nTarget ' %s ' has restored.\n\n", Fs_Path);              #ldic-inotify구현
		fprintf(Write_file, "Target ' %s ' has restored.\n\n", argv[1]);              #ldic-inotify구현
		fclose(Write_file);              #ldic-inotify구현
		              #ldic-inotify구현
		/* 완료 작업 내용 출력 및 시작 로그 기록 */              #ldic-inotify구현
	}              #ldic-inotify구현
              #ldic-inotify구현
              #ldic-inotify구현
	if (ii < 0) {		/* 버퍼 비교에 의한 inotify 함수 초기화 */              #ldic-inotify구현
		perror("inotify_init");              #ldic-inotify구현
	}              #ldic-inotify구현
	else              #ldic-inotify구현
	              #ldic-inotify구현
	system("date -R >> dfs.log; echo Defending_Start >> dfs.log");	/* 날짜 출력과 함께 로그 기록을 생성하고 시작 (존재 할시 이어서 기록한다. */              #ldic-inotify구현
	              #ldic-inotify구현
	if (argc < 2 ) { 	/* 외부 인자 값의 유.무를 파악 하여 작업 선언 */              #ldic-inotify구현
		printf ("Do not start defend file system... Please running with insert Target path.\n\n BYE~!\n");              #ldic-inotify구현
		exit (0);              #ldic-inotify구현
	} else {              #ldic-inotify구현
	              #ldic-inotify구현
		if ( access(Fs_Path, F_OK) == -1 ) { /* 타겟 파일의 존재를 파악하여 없다면 종료 시킨다. */              #ldic-inotify구현
			fprintf(stderr, "Target %s does not exist... to EXIT.", Fs_Path);              #ldic-inotify구현
			exit (0);              #ldic-inotify구현
		}               #ldic-inotify구현
	              #ldic-inotify구현
		fprintf (stderr, "Defending start... \n File path = '%s' of systems\nIf you wnat exit to 'CTRL +C'.\n", argv[1]);              #ldic-inotify구현
              #ldic-inotify구현
		Back_Target();	/* 타깃 파일을 백업 한다. */              #ldic-inotify구현
	}              #ldic-inotify구현
	              #ldic-inotify구현
	Inotify_Buff = inotify_add_watch(ii, argv[1], IN_MODIFY | IN_CREATE | IN_DELETE | IN_MOVED_FROM | IN_MOVED_TO | IN_MOVE_SELF);	/* inotify 각 이벤트 발생에 따른 함수 실행을 위한 변수 지정 */              #ldic-inotify구현
	              #ldic-inotify구현
	while(1) {	/* 지정한  타겟 파일에 대한 반복 감시 시작 */               #ldic-inotify구현
		int origin_size, i = 0;              #ldic-inotify구현
		origin_size = read(ii, buffer, Buffer_size);              #ldic-inotify구현
		if (origin_size < 0) {              #ldic-inotify구현
			perror("read");              #ldic-inotify구현
		}              #ldic-inotify구현
		              #ldic-inotify구현
		while ( i < origin_size ) {	/* 이벤트 발생을 위한 반복 수행 */              #ldic-inotify구현
			struct inotify_event *event = (struct inotify_event *) &buffer[i];	              #ldic-inotify구현
              #ldic-inotify구현
			fprintf(stderr, "\nVariance check = Wd : %d , Mask : %d , Cookie : %d , Length : %d , Type : %s\n\n", event->wd, event->mask, event->cookie, event->len, (event->mask & IN_ISDIR)?"Directory":"File");	/* 타깃 파일에 대한 변화를 감지 하여 변화된 실제 파일의 타입을 출력하고 로그를 기록한다. */              #ldic-inotify구현
			              #ldic-inotify구현
			system("date -R >> dfs.log");              #ldic-inotify구현
			              #ldic-inotify구현
			Write_file = fopen("dfs.log", "a");              #ldic-inotify구현
			              #ldic-inotify구현
			fprintf(Write_file, "\nVariance check = Wd : %d , Mask : %d , Cookie : %d , Length : %d , Type : %s\n\n", event->wd, event->mask, event->cookie, event->len, (event->mask & IN_ISDIR)?"Directory":"File");	/* 변화된 사항과 만일 타깃 디렉터레에 추가된 사항이면 그것이 어떤 타입인지 확인 */              #ldic-inotify구현
			              #ldic-inotify구현
			fclose(Write_file);              #ldic-inotify구현
              #ldic-inotify구현
			if (event->mask & IN_CREATE) {	/* 타깃 디렉터리에서 파일이나 디렉토리가 생성 되었을 경우 이벤트 처리 */              #ldic-inotify구현
			              #ldic-inotify구현
				printf("\n %s was created. at Watching in Target Directory.\n\n", event->name);              #ldic-inotify구현
				              #ldic-inotify구현
				/* 시작 출력과 출력 로그를 기록한다. */              #ldic-inotify구현
				              #ldic-inotify구현
				Write_file = fopen("dfs.log", "a");              #ldic-inotify구현
				fprintf(Write_file, "\n %s was created in Target Directory. \n\n", event->name);              #ldic-inotify구현
				fclose(Write_file);              #ldic-inotify구현
				syscon();              #ldic-inotify구현
				}              #ldic-inotify구현
				              #ldic-inotify구현
				/* 완료 출력과 출력 로그를 기록한다. */              #ldic-inotify구현
				              #ldic-inotify구현
			else if (event->mask & IN_DELETE || IN_DELETE_SELF) {	/* 타깃에 삭제가 발생할 경우 이벤트 처리 */              #ldic-inotify구현
              #ldic-inotify구현
				printf(" %s was deleted at Watching Target.\n", event->name);              #ldic-inotify구현
						              #ldic-inotify구현
				Write_file = fopen("dfs.log", "a");              #ldic-inotify구현
				fprintf(Write_file, " %s was deleted at Watching Target. \n", event->name);              #ldic-inotify구현
				fclose(Write_file);              #ldic-inotify구현
				syscon();               #ldic-inotify구현
				}              #ldic-inotify구현
				              #ldic-inotify구현
			else if (event->mask & IN_MODIFY ) {	/* 타깃에 변동이 발생 되었을 경우 이벤트 처리 */               #ldic-inotify구현
              #ldic-inotify구현
				printf(" %s was modified at Watching Target.\n", event->name);              #ldic-inotify구현
				Write_file = fopen("dfs.log", "a");              #ldic-inotify구현
				fprintf(Write_file, "%s was created. at Watching Target of file system.\n", event->name);              #ldic-inotify구현
				fclose(Write_file);              #ldic-inotify구현
				syscon();               #ldic-inotify구현
				}              #ldic-inotify구현
              #ldic-inotify구현
			else if (event->mask & IN_MOVED_FROM || event->mask & IN_MOVED_TO || event->mask & IN_MOVE_SELF) {	/* 타깃에 대한 이동 발생시 이벤트 처리 */              #ldic-inotify구현
              #ldic-inotify구현
				printf("%s was moved at Watching Target.\n", event->name);              #ldic-inotify구현
				Write_file = fopen("dfs.log", "a");              #ldic-inotify구현
				fprintf(Write_file, "%s was moved at Watching Target.\n", event->name);              #ldic-inotify구현
				fclose(Write_file);              #ldic-inotify구현
				syscon();               #ldic-inotify구현
				}              #ldic-inotify구현
			i = 0;              #ldic-inotify구현
			longjmp(point, 1);	/* jmp 셋팅한 지점으로 다시 되돌아 간다. */              #ldic-inotify구현
			}              #ldic-inotify구현
		}              #ldic-inotify구현
	return 0;              #ldic-inotify구현
	}              #ldic-inotify구현
              #ldic-inotify구현
--


-- ldic-save text to file --

#include <stdio.h>              #ldic-save text to file
              #ldic-save text to file
int main() {              #ldic-save text to file
              #ldic-save text to file
FILE *st;              #ldic-save text to file
              #ldic-save text to file
st=fopen("text.txt","w");              #ldic-save text to file
              #ldic-save text to file
fprintf(st,"Hello World");              #ldic-save text to file
              #ldic-save text to file
fclose(st);              #ldic-save text to file
              #ldic-save text to file
}              #ldic-save text to file
--
라이브러리 업데이트 for v-0.2-2 (Fri, 11 Nov 2016 04:22:30 +0900) - COSMOS Project.(cosmosproject15@gmail.com)
