< About Linux-bash guide dictionarys >


# 기호로 시작하면 주석이다.
함수(Function)
형식은 다른 언어와 차이는 없다. 그러나 function는 생략해도 된다.
함수 명을 쓰면 함수가 호출이 되는데 주의할 것은 호출 코드가 함수 코드보다 반드시 뒤에 있어야 된다. 함수 코드 보다 앞에서 호출 시 오류가 발생한다.

test() {
    echo "test completed"
}

test


# 함수에 인자값 전달하기(공백의로 뛰어서 2개의 인자값을 넘김)

test

"test completed"


변수(Variable)

# 전역 변수 지정
string="hello world"
echo ${string}

# 환경 변수 선언
export hello_world="hello world"






위치 매개 변수(Positional Parameters)
문자	설명
$0 	실행된 스크립트 이름
$1 	$1 $2 $3...${10}인자 순서대로 번호가 부여된다. 10번째부터는 "{}"감싸줘야 함
$* 	전체 인자 값
$@ 	전체 인자 값($* 동일하지만 쌍따옴표로 변수를 감싸면 다른 결과 나옴)
$# 	매개 변수의 총 개수

특수 매개 변수(Special Parameters)
문자	설명
$$ 	현재 스크립트의 PID
$? 	최근에 실행된 명령어, 함수, 스크립트 자식의 종료 상태
$! 	최근에 실행한 백그라운드(비동기) 명령의 PID
$- 	현재 옵션 플래그
$_ 	지난 명령의 마지막 인자로 설정된 특수 변수

whereis # 어떤 소프트웨어가 어디에 있는지 알아보는 명령어
ex > whereis gedit

배열(Array Variable)
배열 변수 사용은 반드시 괄호를 사용해야 한다.(예: ${array[1]})
참고: 1차원 배열만 지원함

# 배열의 크기 지정없이 배열 변수로 선언
# 참고: 'declare -a' 명령으로 선언하지 않아도 배열 변수 사용 가능함
declare -a array

# 4개의 배열 값 지정
array=("hello" "test" "array" "world")

# 기존 배열에 1개의 배열 값 추가(순차적으로 입력할 필요 없음)
array[4]="variable"

# 기존 배열 전체에 1개의 배열 값을 추가하여 배열 저장(배열 복사 시 사용)
array=(${array[@]} "string")

# 위에서 지정한 배열 출력
echo "hello world 출력: ${array[0]} ${array[3]}"
echo "배열 전체 출력: ${array[@]}"
echo "배열 전체 개수 출력: ${#array[@]}"

printf "배열 출력: %s\n" ${array[@]}

# 배열 특정 요소만 지우기
unset array[4]
echo "배열 전체 출력: ${array[@]}"

# 배열 전체 지우기
unset array
echo "배열 전체 출력: ${array[@]}"

# 읽기 전용
# readonly string_variable="hello world" 문법과 동일 함
declare -r string_variable

# 정수
# number_variable=10 문법과 동일 함
declare -i number_variable=10

# 배열
# array_variable=() 문법과 동일 함
declare -a array_variable

# 환경 변수
# export export_variable="hello world" 문법과 동일 함
declare -x export_variable="hello world"

# 현재 스크립트의 전체 함수 출력
declare -f

# 현재 스크립트에서 지정한 함수만 출력
declare -f 함수이름

논리 연산자(Logical Operators)
문자	설명
&&, -a 	논리 AND
||, -o 	논리 OR

산술 연산자(Arithmetic Operators)
문자	설명
+ 	더하기
- 	빼기
* 	곱하기
/ 	나누기
++ 	누승(exponentiation)
% 	modulo 나 mod (정수 나누기에서 나머지 값)
+= 	상수값 만큼 증가(plus-equal)
-= 	상수값 만큼 감소(minus-equal)
*= 	상수값을 곱함(times-equal)
/= 	상수값으로 나눔(slash-equal)
%= 	상수값으로 나눈 나머지 값(mod-equal)

비트 연산자(Bitwise Operators)
문자	설명
<< 	비트 왼쪽 쉬프트(쉬프트 한 번당 2를 곱하는 것과 동일함)
<<= 	left-shift-equal
>> 	비트 오른쪽 쉬프트(쉬프트 한 번당 2로 나눔)
>>= 	right-shift-equal(<<=와 반대)
& 	비트 and
&= 	비트 and-equal
| 	비트 OR
|= 	비트 OR-equa
~ 	비트 negate
! 	비트 NOT
^ 	비트 XOR
^= 	비트 XOR-equa

기타 연산자(Miscellaneous Operators)
문자	설명
, 	콤마 연산자(comma operator), 2개 이상의 산술 연산을 묶어줌

정수 비교(Integer Comparison)
문자	설명
-eq 	같음
-ne 	같지 않음
>, -gt 	더 큼(> 이중 소괄호에서 사용 가능)
>=, -ge 	더크거나 같음(>= 이중 소괄호에서 사용 가능)
<, -lt 	더 작음(< 이중 소괄호에서 사용 가능)
<=, -le 	더 작거나 같음(<= 이중 소괄호에서 사용 가능)

문자열 비교(String Comparison)
문자	설명
=, == 	같음
!= 	같지 않음
< 	ASCII 알파벳 순서에 더 작음
> 	ASCII 알파벳 순서에서 더 큼
-z 	문자열이 NULL, 길이가 0인 경우
-n 	문자열이 NULL이 아님
${변수} 	문자열이 NULL이 아님

파일 비교(File test operators)
문자	설명
-e 	파일이 존재하고 파일이 있는 경우
-f 	파일이 존재하고 정규 파일인 경우
-s 	파일이 존재하고 0보다 큰 경우
-d 	파일이 존재하고 디렉토리인 경우
-b 	파일이 존재하고 블록장치 파일인 경우
-c 	파일이 존재하고 캐릭터 장치 파일인 경우
-p 	파일이 존재하고 FIFO인 경우
-h 	파일이 존재하고 한 개 이상의 심볼릭 링크가 설정된 경우
-L 	파일이 존재하고 한 개 이상의 심볼릭 링크가 설정된 경우
-S 	파일이 소켓 디바이스인 경우
-t 	파일이 디스크립터가 터미널 디바이스와 연관이 있음
-r 	파일이 존재하고 읽기 가능한 경우
-w 	파일이 존재하고 쓰기가 가능한 경우
-x 	파일이 존재하고 실행 가능한 경우
-g 	파일이 존재하고 SetGID가 설정된 경우
-u 	파일이 존재하고 SetUID가 설정된 경우
-k 	파일이 존재하고 스티키 비트(Sticky bit)가 설정된 경우
-O 	자신이 소유자임
-G 	그룹 아이디가 자신과 같음
-N 	마지막으로 읽힌 후에 변경 됐음
file1 -nt file2 	file1 파일이 file2 파일보다 최신임
file1 -ot file2 	file1 파일이 file2 파일보다 예전것임
file1 -ef file2 	file1 파일과 file2 파일이 같은 파일을 하드 링크하고 있음
! 	조건이 안 맞으면 참

반복문(for, while, until)
반목문 작성 시 아래 명령어(흐름제어)을 알아두면 좋다.
반복문을 빠져 나갈때: break
현재 반복문이나 조건을 건너 뛸때: continue

# 지정된 범위 안에서 반복문 필요 시 좋음
for string in "hello" "world" "..."; do;
    echo ${string};
done

# 수행 조건이 true 일때 실행됨 (실행 횟수 지정이 필요하지 않은 반복문 필요 시 좋음)
count=0
while [ ${count} -le 5 ]; do
    echo ${count}
    count=$(( ${count}+1 ))
done

# 수행 조건이 false 일때 실행됨 (실행 횟수 지정이 필요하지 않은 반복문 필요 시 좋음)
count2=10
until [ ${count2} -le 5 ]; do
    echo ${count2}
    count2=$(( ${count2}-1 ))
done


조건문(if...elif...else...fi)
조건문 작성 시 주의해야될 부분은 실행 문장이 없으면 오류 발생함

string1="hello"
string2="world"
if [ ${string1} == ${string2} ]; then
    # 실행 문장이 없으면 오류 발생함
    # 아래 echo 문장을 주석처리하면 확인 가능함
    echo "hello world"
elif [ ${string1} == ${string3} ]; then
    echo "hello world 2"
else
    echo "hello world 3"
fi

# AND
if [ ${string1} == ${string2} ] && [ ${string3} == ${string4} ]
..생략

# OR
if [ ${string1} == ${string2} ] || [ ${string3} == ${string4} ]
..생략

# 다중 조건
if [[ ${string1} == ${string2} || ${string3} == ${string4} ]] && [ ${string5} == ${string6} ]
..생략


선택문(case)
정규식을 지원하며 | 기호로 다중 값을 입력 가능하며 조건의 문장 끝에는 ;; 기호로 끝을 표시한다.
참고: 대문자와 소문자는 다른 문자다.

# case문 테스트를 위한 반복문
for string in "HELLO" "WORLD" "hello" "world" "s" "start" "end" "etc"; do

    # case문 시작
    case ${string} in
        hello|HELLO)
            echo "${string}: hello 일때"
            ;;
        wo*)
            echo "${string}: wo로 시작하는 단어 일때"
            ;;
        s|start)
            echo "${string}: s 혹은 start 일때"
            ;;
        e|end)
            echo "${string}: s 혹은 start 일때"
            ;;
        *)
            echo "${string}: 기타"
            ;;
    esac
    # //case문 끝

done


디버깅(Debugging)
간단하게는 echo, exit 명령나 tee 명령어로 디버깅한다.
다른 방법으로 실행 시 옵션을 주거나 코드에 한줄만 추가하면 해볼수 있다.
Bash 옵션(스크립트 실행 시)	set 옵션(스크립트 코드 삽입)	설명
bash -n 	set -n, set -o noexec 	스크립트 실행없이 단순 문법 오류만 검사(찾지 못하는 문법 오류가 있을수 있음)
bash -v 	set -v, set -o verbose 	명령어 실행전 해당 명령어 출력(echo)
bash -x 	set -x, set -o xtrace 	명령어 실행후 해당 명령어 출력(echo)
	set -u, set -o nounset 	미선언된 변수 발견시 "unbound variable" 메시지 출력

마무리하며

    여기서 인자(argument)와 매개변수(parameter)는 이름만 다를 뿐 의미는 같다.
    Bash는 공백에 민감하다.

    while [ : ]; do "명령어"; done #루프

VMSTATLOG=$(vmstat 1 2 | sed -e '1,3d') #  VMSTATLOG에 저장된 값을 ARRAY변수에 배열로 저장
read -ra ARRAY <<< "$VMSTATLOG" #  구분자는 기본 공백, 구분자를 변경하려면 IFS 값을 설정하면됨.
echo "${ARRAY[@]}" #shell script 내에서 문자열을 array에 저장하기



read -n 1 -p "input [y/N]:" #기본적으로 read는 입력값을 REPLY 변수에 저장함
echo "$REPLY" #기본적으로 read는 입력값을 REPLY 변수에 저장함



read -n 1 -p "input [y/N]:" yesno #입력값을 REPLY이 아닌 yesno 변수에 저장
echo "$yesno"	#입력값을 REPLY이 아닌 yesno 변수에 저장


read  -p "input yes|no count :" yesno count #입력값을 순차적으로 yesno, count에 저장
echo "$yesno"	#입력값을 순차적으로 yesno, count에 저장
echo "$count"	#입력값을 순차적으로 yesno, count에 저장
sed -n '3p' /etc/passwd, #(3번째 라인까지 출력)
head -2 test | tail -1 # 2라인 출력
trap arg signal

trap command signal # 강제 종료시 가로채기 스크립트 ctrl + c

trap 'action' signal1 signal2 signalN # 강제 종료시 가로채기 스크립트 ctrl + c

trap 'action' SIGINT # 강제 종료시 가로채기 스크립트 ctrl + c

trap 'action' SIGTERM SIGINT SIGFPE SIGSTP # 강제 종료시 가로채기 스크립트 ctrl + c

trap 'action' 15 2 8 20 # 강제 종료시 가로채기 스크립트 ctrl + c
echo `seq 1 10` # 순차 나타내기 <처음, 제외, 끝>

echo '1+1' |bc # 계산 bash math


[ stringName ]  # if문 문자열이 널(NULL)인지 체크, Null이 아니면 참

[ -n stringName ] #if문 문자열의 사이즈가 0 이상인지 체크, 0 이상이면 참

[ -z stringName ] # if 문문자열의 사이즈가 0 인지 체크, 0이면 참

[ stringNameA = stringNameB ] # if A문자열과 B문자열이 같은지 체크, 같으면 참

[ stringNameA != stringNameB ] # if A문자열과 B문자열이 다른지 체크, 다르면 참


[ intA -ge 100 ] # if 숫자 A가 100보다 크거나 같은지 체크, 100 이상이면 참

[ intA -gt 100 ] # if 숫자 A가 100보다 큰지 체크, 100이 넘으면 참

[ intA -le 100 ] # if #숫자 A가 100보다 작거나 같은지 체크, 100 이하이면 참

[ intA -lt 100 ] # if 숫자 A가 100보자 작은지 체크, 100 미만이면 참


[ -r filename ] # if 해당 파일이 읽기 가능한지 체크

[ -w filename ] # if 해당 파일이 쓰기 가능한지 체크

[ -x filename ] # if 해당 파일이 실행 가능한지 체크

[ -s filename ] # if 해당 파일의 사이즈가 제로 이상인지 체크

[ -d filename ] # if 해당 파일이 디렉토리 파일인지 체크

[ -f filename ] # if 해당 파일이 보통 파일인지 체크

[ -h filename ] # if 해당 파일이 링크 파일인지 체크

chown myprogram admin # 해당 파일이나 디렉토리의 사용자를 'admin'으로 바꾼다.

chgrp myprogram group  # 해당 파일이나 디렉토리의 그룹을 'group'으로 바꾼다.

# chmod tip

user(u), group(g), other(o)

chmod o-rx folder	# 해당 폴더의 다른 사용자(other) 권한에서 읽기와 실행을 삭제한다.

# RAM DISK MAKE
mkdir -p /tmp/ramdisk0
mkfs -t ext2 /dev/ram0
mount /dev/ram0 /tmp/ramdisk0
lilo
echo ramdisk=10000 > /etc/lilo.conf # ram disk size

lintian *.changes	# builded deb 검사

# dpkg-build
dh_make -c GPL --createorig (-c 는 저작권 내용 삽입, --createorig 는 orig.tar.gz 파일 생성) # dpkg-build
 dpkg-buildpackage -rfakeroot -k<key id> # dpkg-build
 lintian *.changes # dpkg-build 만들어진 파일 검사
debian/control = 설정 파일, debian/changelog = 체인지 로그 파일 (unstable; > 배포판 name) , debian/.install <install root directory> # dpkg-build
debuild -S -sa -k<key id> # dpkg-build debian빌드
#makdeb : dpkg -b <folder> , fakeroot debian/rules
# dpkg-source 는 데비안 패키지의 소스를 팩/언팩한다.
# dpkg-gencontrl은 언팩된 데비안 트리 소스에서 정보를 읽고 바이너리 패키지 컨트롤 패키지를 생성하며 Debian/files에 항목을 생성한다.
# dpkg-shlibdeps는 라이브러리에 필요한 의존성을 계산한다.
# dpkg-buildpackage는 언팩된 데비안 트리 소스에서 정보를 읽고 구성된 컨트롤 파일 (.changes)를 생성한다.
# dpkg-distaddfile은 debian/files에 파일을 추가한다.
# dpkg-parserchangelog는 언팩된 데비안 트리 소스에서 바뀜 기록(changelog) 파일을 읽고 바뀐 내용에 대해 빠르게 준비된 결과물을 생성한다.
$ dpkg -i 패키지.deb # 패키지 설치
$ dpkg -P # 패키지 제거
$ dpkg -l     (소문자 L 임) # 설치된 패키지 리스트
$ dpkg -l openssh-server #설치된 패키지 리스트
$ dpkg -l | grep ssh # 설치된 패키지 리스트
$ dpkg -L openssh-server # 설치된 패키지에 포함된 파일들 보기
$ dpkg -c 패키지.deb # deb 파일 패키지에 포함된 파일들 보기
$ dpkg -I 패키지.deb # deb 파일 정보 보기
$ dpkg -S /usr/sbin/sshd # 파일이 포함된 패키지 이름 알아내기
sudo dpkg --configure -a --force-all # dpkg fix
sudo dpkg --remove --force-remove-reinstreq <package> 	# dpkg fix

find /etc -name pass*	# find "pass" "file from /etc folder

라이브러리 업데이트 for v-0.2-2 (Fri, 11 Nov 2016 04:22:30 +0900) - COSMOS Project.(cosmosproject15@gmail.com)


< Shell software guide dictionarys >

grep -E "a|b|c" * # grep 여러 문자 찾기

# Low format : ex) sudo dd if=/dev/zero of=/dev/sdb 2ex) , ex2) ex) sudo dcfldd if=/dev/zero of=/dev/sdb #dcfldd is formating monitering. , dd --help , dcfldd --help

# Release upgrade , 배포판 업그레이드

sudo apt-get update 	# Release upgrade, 배포판 업그레이드
sudo apt-get upgrade 	# Release upgrade, 배포판 업그레이드
sudo apt-get dist-upgrade  	# Release upgrade, 배포판 업그레이드
sudo update-manager -d 	# Release upgrade, 배포판 업그레이드

# swap swapoff : fdisk (n-3-t-3-82) mkswap, swapon, swapoff , ##:task /etc/fstab (/dev/sda3		swap	swap	default 0 0

# sudo auto passwd :  /etc/sudoers >> (adminator) ALL=NOPASSWD: ALL

# x-session desktop install : tasksel ,
# x-session change : sudo update-alternatives --config x-session-manager

# resize partition : parted </dev/sd?> resizepart <2> , resize2fs </dev/sdd>

# download : wget, git, youtube-dl

# dpkg-build

dh_make -c GPL --createorig (-c 는 저작권 내용 삽입, --createorig 는 orig.tar.gz 파일 생성) # dpkg-build

 dpkg-buildpackage -rfakeroot -k<key id> # dpkg-build

 lintian *.changes # dpkg-build 만들어진 파일 검사

debian/control = 설정 파일, debian/changelog = 체인지 로그 파일 (unstable; > 배포판 name) , debian/.install <install root directory> # dpkg-build

debuild -S -sa -k<key id> # dpkg-build debian빌드

# ppa :  add-apt-repository, add-apt-repository -r , ppa upload = dput  ppa: .changes

#makdeb : dpkg -b <folder> , fakeroot debian/rules

# del : rm , rm -rf

# locale (언어설정) =

cat file | grep -o ...*text # text 이전 문자열 전부 출력

cat file | grep -o text...* text 이후 문자열 전부 출력

# user, password = useradd, passwd , passwd -dl <root>

# font (ttf) : root = /usr/share/fonts,  fc-cache -f -v  (font refresh)

# ip : ifconfig (내부 아이피 화인) , curl ifconfig.me (외부 주소 확인)

#arduin : arduino , * sudo usermod -aG dialout <사용자 이름> , sudo adduser <사용자아이디> uucp (re login  필요)*

# dpkg-source 는 데비안 패키지의 소스를 팩/언팩한다.
# dpkg-gencontrl은 언팩된 데비안 트리 소스에서 정보를 읽고 바이너리 패키지 컨트롤 패키지를 생성하며 Debian/files에 항목을 생성한다.
# dpkg-shlibdeps는 라이브러리에 필요한 의존성을 계산한다.
# dpkg-buildpackage는 언팩된 데비안 트리 소스에서 정보를 읽고 구성된 컨트롤 파일 (.changes)를 생성한다.
# dpkg-distaddfile은 debian/files에 파일을 추가한다.
# dpkg-parserchangelog는 언팩된 데비안 트리 소스에서 바뀜 기록(changelog) 파일을 읽고 바뀐 내용에 대해 빠르게 준비된 결과물을 생성한다.

# disk : gparted,  parted, fdisk, cfdisk, resize2fs(resize partition 재정렬)

# security : ufw, iptable, selinux ( getsebool -a ; 모든 동작 확인, setsebool <동작> on, ooff ; 동작 제어)

/proc/sys/net/ipv6/conf/all/disable_ipv6 = 1 (disable) , sysctl -p #ipv6 disable :
/etc/sysctl.conf
net.ipv6.conf.all.disable_ipv6 = 1	#ipv6 disable
net.ipv6.conf.default.disable_ipv6 = 1	#ipv6 disable
net.ipv6.conf.lo.disable_ipv6 = 1	#ipv6 disable

iconv -c -f euc-kr -t utf-8 test.txt > test-utf8.txt # 인코딩 변환



 comm [옵션] [파일1] [파일2] # 파일간의 문자열 공통 행 찾기
  -123 : 해당 필드를 감춘다. 	 # 파일간의 문자열 공통 행 찾기

 cmp [-l][-s] 파일1 파일2 # 파일간의 문자열     byte by byte 또는 character by character로 파일을
                                    # 파일간의 문자열  비교하는 유틸리티(틀리는 행과 틀리는 문자의 개수를 표시)
  -l : 상이한 모든 바이트에 대한 정보 출력 	# 파일간의 문자열
  -s : 두 파일간 비교휴 메시지를 출력하지 않고 종료  # 파일간의 문자열

 diff [옵션] [파일1] [파일2] : 	# 파일간의 문자열 두 텍스트 파일의 차이(내용)를 검색 출력한다.
  -e : # 파일간의 문자열 파일1의 내용을 파일2가 가리키는 내용으로 변경
  -b : # 파일간의 문자열 [tab] 문자, 단어사이의 공백, 행 끝부분에 있는 공백문자를 무시하고 이때
        시작하는 처음 공백은 제외되므로 검색된다.
  -r : # 파일간의 문자열 파일1과 파일2가 디렉토리인 경우 순환적인 방법으로 비교

 bdiff # 파일간의 문자열 파일1 파일2 [라인수][옵션] : 두 개의 큰 파일간의 차이점을 비교하는 명령어로,
                                           # 파일간의 문자열  파일의 크기가 큰 파일을 비교하는 경우 사용
  -s :  # 파일간의 문자열 bdiff 결과 출력시 메시지는 출력하지 않는다.
  -n : # 파일간의 문자열 bdiff  n은 라인수이며, 디폴트는 3,500이 된다. # 파일간의 문자열 bdiff

 sdiff [옵션] 파일1 파일2 : 두 파일간에 서로 다른 라인을 출력하는 명령어
  -l : 	# 파일간의 문자열 비교되는 두 파일 중에서 내용이 같으면 첫 파일만 표시해준다.
  -s : 	# 파일간의 문자열 비교되는 라인이 같으면 출력하지 않는다.
  -w : 	# 파일간의 문자열 수 출력하는 라인 폭을 지정한다. 디폴트는 130자이

sshfs user@ip:~/folder ~/folder # 네트워크 혹은 로컬 상의 폴더 마운트

vi -c "%g/찾을문자열/d" -c "wq" filename # 해당 문자열이 있는 라인 전부 삭제

#time, date : date , sudo date -s 'yyyy-mmmm-dd tt-tt-tt' ; , rdate
# sed -e 'd' file : file의 모든행 삭제
# sed -e '1d' file : file의 1행 삭제
# sed -i 's/1234/xxxx/g' file : file의 1234 문자열 을 xxxx로 변환
sed '/test/d' 1.html : # test 문자가 포함된 줄을 삭제하여 출력한다.

sed '/text/!d' 1.html : # text 문자가 있는 줄만 지우지 않는다.

sed '1,2d' 1.html : # 처음 1줄, 2줄을 지운다.

sed '/^$/d' 1.html : # 공백라인을 삭제하는 명령이다.

find . -name '*.tmp' -exec rm {} \;  # 본 디렉터리내의 하위 디렉토리들 중에서 *.tmp 파일을 찾아 삭제

#$RANDOM 은 bash 내부 함수(상수가 아님)로 0에서 32767사이의 의사난수를 리턴.
# gpg file encrypt: gpg --output <outfilename> --encrypt --recipient <KEY> <originFILE>
# gpg file decrypt: gpg --output <outFILE> --decrypt <origFILE>
mount --bind [원본 디렉토리] [붙일 디렉토리] # folder mount

ls | grep --color name  # ls filename float color

nl file # file read with line number display

convmv -f euc-kr -t utf-8 --notest a.txt d # 인코딩 파일 이름 변경

cat my_file.txt | grep text # 파일 내용 중 text만 출력

$ dpkg -i 패키지.deb # 패키지 설치
$ dpkg -P # 패키지 제거

$ dpkg -l     (소문자 L 임) # 설치된 패키지 리스트
$ dpkg -l openssh-server #설치된 패키지 리스트
$ dpkg -l | grep ssh # 설치된 패키지 리스트

$ dpkg -L openssh-server # 설치된 패키지에 포함된 파일들 보기

$ dpkg -c 패키지.deb # deb 파일 패키지에 포함된 파일들 보기

$ dpkg -I 패키지.deb # deb 파일 정보 보기

$ dpkg -S /usr/sbin/sshd # 파일이 포함된 패키지 이름 알아내기

uniq -u # 중복된 라인을 모두 제거하고 하나의 라인만 표시한다.

sudo dpkg --configure -a --force-all # dpkg fix


gksu  		# 그래픽컬 sudo. -u 명령으로 사용자를 지정할수가 있다.

exo-open --launch FileManager # file manager open in the terminal

mkdir debian/missing-sources    #lintian.... source is missing


echo "abc,def" | tr "a" "f"	# 문자 'a'를 'f'로 변경


echo "abc,def,ghi" | tr -d "[a-z]"	# 알파벳 소문자를 모두 삭제(-d 옵션)


echo "abc,def,ghi" | tr "," "\n"	# 쉼표를 줄바꿈(\n)으로 변경
abc	# 쉼표를 줄바꿈(\n)으로 변경
def	# 쉼표를 줄바꿈(\n)으로 변경
ghi	# 쉼표를 줄바꿈(\n)으로 변경

cat my_file.txt | tr "\n" "\t"	# 쉼표를 줄바꿈(\n)으로 변경
name: john  phone: 010-123-4556    name: jane ...		# 쉼표를 줄바꿈(\n)으로 변경
출처:[bash: tr, sed] # 쉼표를 줄바꿈(\n)으로 변경

sed '/[Tt]est/d'  	# Test 또는 test를 포함하는 모든 라인들을 삭제

cat my_file.txt | tr "\n" "\t" | sed 's/\tname:/\nname:/g' 		# 각 항목별로 줄바꿈
name: john  phone: 010-12304556	# 각 항목별로 줄바꿈
name: jane  phone: 010-345-1234	# 각 항목별로 줄바꿈


 tar -cvzf # 압축

cat   /home/test/aaa  |  wc   -w  # 파일 속 단어수 확인
cat   /home/test/aaa  |  wc   -l    # 파일 속 줄 수 확인

rpm -Uvh [package] # redhot 관련 rpm 설치 명령

rpm -qa [package] # 해당 rpm 패키지가 인스톨 되어 있는지를 확인

rpm -e [package]	# 해당 rpm 패키지를 삭제


mkfs -t ext2 /dev/fd0 1440 # 해당 플로피 디스크를 ext2 타입으로 파일시스템 포맷을 진행

dd if=/boot/vmlinuz of=/dev/fd0 bs=8192 # 부트로더를 플로피 디스크0에 쓴다.

gunzip document.txt.gz # gz파일을 풀때 사용한다.

bunzip2	# bz2 파일을 풀때 사용한다.

tar -xvzf cf.gz -C cf1 # cf.gz 파일을 cf1 폴더에 압축을 해제 한다.

VBoxManage convertfromraw xubuntu-15.10-desktop-amd64.iso make.vdi #

freshclam # clamav update

clamscan -r \home # clamav scan \home

clamscan -r /home -l clamscan.log # 검사기록을 clamscan.log 파일로 저장한다.

clamscan -r /home --move=DIRECTORY # 감염된 파일들을 DIRECTORY 로 이동 시킨다.

sudo update-alternatives -–config default.plymouth # theme 선택 -> sudo update-initramfs -u # 변경

ccd2iso name-of-file.img name-of-file.iso	# img to iso

sudo javaws ./<파일명>.jnlp # jnlp 파일 실행

ffmpeg -i YOURVIDEOFILE.mp4 -r 10 -s 711×400 /tmp/gif/out%04d.gif  # mp4 영상 파일을 gif로

gifsicle –delay=10 –loop /tmp/gif/*.gif > animation.gif	# gif 파일들을 하나의 gif 파일로 묶음

convert -layers Optimize animation.gif animation_optimized.gif  # 용량을 최적화 시켜 gif 파일을 재구축

lsof | grep snd # 사운드(sound) 출력 확인

rm ~/.pulse/*	# 잡음 제거

sudo pm-suspend # 절전 모드

sudo pm-hibernate # 최대 절전 모드

parted /dev/sd? resizepart 2 (partition num) # resize partition

sudo sed -i 's/enabled=1/enabled=0/g' etc/default/apport # 오류 보고 끄기

# hwp to txt > sudo pip install pyhwp > hwp5txt *.hwp # hwp파일을 txt파일로 변환

hdparm -m16 --yes-i-know-what-i-am-doing  /dev/sda # harddisk setting

sudo mv *.ttf /usr/share/fonts/freefonts ￫ sudo fc-cache -f -v 	# font update

mkfs.vfat -F 32 /dev/sda1 ￫ mount -t vfat /dev/sda1 /media/disk	# fat32 file system 만들기

## espeak

apt install espeak espeakedit ￫  $ espeak -v ko "~" -w 1.wav  ## espeak use

curlftpfs -o user=ID:PASSWORD -o codepage=euc-kr -o allow_other ftp://${ftp_server_ip} /mnt/${target_dir} # ftp mount

fuser -ck /mnt/${target_dir}; umount /mnt/${target_dir}	# fuser unmount

## ftp mount

mount -t cifs //192.168.0.100/1x /mnt/1x -o username=_user,password=_pwd,iocharset=utf8,rw	# ftp mount direct

sudo echo "//192.168.0.100/mnt_source /mnt/mnt_point cifs username=_user,pass=_pwd,rw,ver=1,iocharset=utf8,domain=embeded 0 0" >> /etc/fstab

- mkdir -p /mnt/mnt_point

- mnt /mnt/mnt_point (또는 mount -a)

- umount /mnt/mnt_point

## kompozer install

sudo apt-get install libatk1.0-0 libc6 libcairo2 libfontconfig1 libfreetype6 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk2.0-0  libidl0 libnspr4 libnss3 libpango1.0-0 libpng12-0 libstdc++6 libx11-6 libxft2 libxinerama1 libxrender1 libxt6 zlib1g
wget https://launchpad.net/ubuntu/+archive/primary/+files/kompozer-data_0.8%7Eb3.dfsg.1-0.1ubuntu2_all.deb
wget https://launchpad.net/ubuntu/+archive/primary/+files/kompozer_0.8%7Eb3.dfsg.1-0.1ubuntu2_amd64.deb
sudo dpkg -i kompozer-data_0.8~b3.dfsg.1-0.1ubuntu2_all.deb
sudo dpkg -i kompozer_0.8~b3.dfsg.1-0.1ubuntu2_amd64.deb

## google-drive-ocamlfus install

sudo add-apt-repository ppa:alessandro-strada/ppa -y
sudo apt-get update
sudo apt-get install google-drive-ocamlfuse -y
sudo sh -c 'echo "PATH=$PATH:$HOME/.opam/system/bin
export PATH" >> ~/.bashrc'
source ~/.bashrc
google-drive-ocamlfus ~/gd


## exfat setting

sudo apt-get update
sudo apt-get install exfat-utils fuse-exfat -y
sudo mv /lib64/libblkid.so.1.1.0 /lib64/libblkid.so.1.1.0.backup
sudo cp shlibs/blkid/src/.libs/libblkid.so.1.1.0 /lib64/
sudo chmod 644 /lib/libblkid.so.1.1.0
sudo rm /lib/libblkid.so.1
sudo ln -s /lib/libblkid.so.1.1.0 /lib/libblkid.so.1

## 한글 언어팩 설치

apt-get install language-pack-ko
locale-gen ko_KR.UTF-8
touch /etc/default/locale

## github upload
git config --global user.email you@example.com # git config (설정)
git config --global user.name Your Name# git config (설정)
git init
git remote add pi https://github.com/cosmosproject15/pi.git
git add .
git commit -m {커밋-메시지}
git pull {저장소-이름} master
git push {저장소-이름} master

echo "($RANDOM % 44) + 1 | bc  # 1~44 까지 random한 숫자 출력
awk '{print }' b1  # b1 파일의 첫번째 열 출력

ffmpeg -i filename.m4a -acodec libmp3lame -ab 320k filename.mp3   # m4a to mp3 by ffmpeg
ar vx mypackage.deb   # deb 압축 풀기
gpg --gen-key# gpg키를 만든다.
gpg --armor --import cosmosproject15.asc     # import gpg key
gpg --decrypt --recipient{key} file     # decrypt file by gpg key

ffmpeg -i filename.m4a -acodec libmp3lame -ab 320k filename.mp3   # m4a to mp3 by ffmpeg # ffmpeg를 이용한 m4a파일을 mp3로 변환
ar vx mypackage.deb   # deb 압축 풀기
gpg --gen-key# gpg키를 만든다.
gpg --armor --import cosmosproject15.asc     # import gpg key
gpg --decrypt --recipient{key} file     # decrypt file by gpg key
shc -f [bashfile]	# bash shell c compile , 쉘립트를 c언어로 컴파일
anser	# 답
1212	# das
sudo mount -o loop file.nrg folder/	# NRG FILE MOUNT , nrg파일을 마운트
nrg2iso	# nrg file to iso convert
/etc/services	# linux sevices list, 리눅스 서비스 목록이 있는 파일
sudo ufw allow 22/tcp	# 22 port allow, ufw 방화벽22번 포트만 허가
sudo apt-get install vino ; vino-preference ; /usr/lib/vino/vino-server -> autostart ; /etc/lightdm/lightdm.conf -> autologin set ; mkdir ~/.gnome2/ketrings ; echo 'passwd' |base64 > default.keyring	# vino server setting, 원격 제어모듈 vino 서버 셋팅



# ipv6 disable
echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6 
echo "net.ipv6.conf.all.disable_ipv6=1
net.ipv6.conf.default.disable_ipv6=1
net.ipv6.conf.lo.disable_ipv6=1" >> /etc/sysctl.conf
sudo sysctl -p
sudo /etc/init.d/networking restart

# vsftp anonymouse setting (vsftpd 익명 설정)
/etc/passwd touch
	ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin
		-> ftp:x:14:50:FTP User:/home/test:/sbin/nologin
echo	"ftp_username=test" >>  /etc/vsftpd/vsftpd.conf

# android Embedded (임베디드)

adb shell monkey --pct-touch <percent>     # adb monkey           Touch event 발생 빈도 조절
adb shell monkey --pct-motion <percent>     # adb monkey          드래그 event 발생 빈도 조절
adb shell monkey --pct-trackball <percent>     # adb monkey       트랙볼 event 발생 빈도 조절
adb shell monkey --pct-nav <percent>     # adb monkey              Navigation event 발생 빈도 조절
adb shell monkey --pct-majornav <percent>     # adb monkey      Back, Home 버튼등의 major navigation event 발생 빈도 조절
adb shell monkey --pct-syskeys <percent>     # adb monkey       System event 발생 빈도 조절 (Volume, home, end call 등)
adb shell monkey --pct-appswitch <percent>     # adb monkey    새로운 app. 실행 event 발생 빈도 조절
adb shell monkey --pct-anyevent <percent>     # adb monkey      기타 event 발생 빈도 조절

echo "export WINEARCH=win32" >>~/.bashrc # wine 32bit change , wine 32비트로 고정 체인지


< Shell software guide dictionarys >

grep -E "a|b|c" * # grep 여러 문자 찾기

# Low format : ex) sudo dd if=/dev/zero of=/dev/sdb 2ex) , ex2) ex) sudo dcfldd if=/dev/zero of=/dev/sdb #dcfldd is formating monitering. , dd --help , dcfldd --help

# Release upgrade , 배포판 업그레이드

sudo apt-get update 	# Release upgrade, 배포판 업그레이드
sudo apt-get upgrade 	# Release upgrade, 배포판 업그레이드
sudo apt-get dist-upgrade  	# Release upgrade, 배포판 업그레이드
sudo update-manager -d 	# Release upgrade, 배포판 업그레이드

# swap swapoff : fdisk (n-3-t-3-82) mkswap, swapon, swapoff , ##:task /etc/fstab (/dev/sda3		swap	swap	default 0 0 

# sudo auto passwd :  /etc/sudoers >> (adminator) ALL=NOPASSWD: ALL

# x-session desktop install : tasksel ,
# x-session change : sudo update-alternatives --config x-session-manager 

# resize partition : parted </dev/sd?> resizepart <2> , resize2fs </dev/sdd>

# download : wget, git, youtube-dl 

# dpkg-build  

dh_make -c GPL --createorig (-c 는 저작권 내용 삽입, --createorig 는 orig.tar.gz 파일 생성) # dpkg-build

 dpkg-buildpackage -rfakeroot -k<key id> # dpkg-build

 lintian *.changes # dpkg-build 만들어진 파일 검사 

debian/control = 설정 파일, debian/changelog = 체인지 로그 파일 (unstable; > 배포판 name) , debian/.install <install root directory> # dpkg-build

debuild -S -sa -k<key id> # dpkg-build debian빌드 

# ppa :  add-apt-repository, add-apt-repository -r , ppa upload = dput  ppa: .changes

#makdeb : dpkg -b <folder> , fakeroot debian/rules  

# del : rm , rm -rf

# locale (언어설정) = 

cat file | grep -o ...*text # text 이전 문자열 전부 출력

cat file | grep -o text...* text 이후 문자열 전부 출력 

# user, password = useradd, passwd , passwd -dl <root>

# font (ttf) : root = /usr/share/fonts,  fc-cache -f -v  (font refresh)

# ip : ifconfig (내부 아이피 화인) , curl ifconfig.me (외부 주소 확인)

#arduin : arduino , * sudo usermod -aG dialout <사용자 이름> , sudo adduser <사용자아이디> uucp (re login  필요)*

# dpkg-source 는 데비안 패키지의 소스를 팩/언팩한다.
# dpkg-gencontrl은 언팩된 데비안 트리 소스에서 정보를 읽고 바이너리 패키지 컨트롤 패키지를 생성하며 Debian/files에 항목을 생성한다.
# dpkg-shlibdeps는 라이브러리에 필요한 의존성을 계산한다.
# dpkg-buildpackage는 언팩된 데비안 트리 소스에서 정보를 읽고 구성된 컨트롤 파일 (.changes)를 생성한다.
# dpkg-distaddfile은 debian/files에 파일을 추가한다.
# dpkg-parserchangelog는 언팩된 데비안 트리 소스에서 바뀜 기록(changelog) 파일을 읽고 바뀐 내용에 대해 빠르게 준비된 결과물을 생성한다.

# disk : gparted,  parted, fdisk, cfdisk, resize2fs(resize partition 재정렬)

# security : ufw, iptable, selinux ( getsebool -a ; 모든 동작 확인, setsebool <동작> on, ooff ; 동작 제어)

/proc/sys/net/ipv6/conf/all/disable_ipv6 = 1 (disable) , sysctl -p #ipv6 disable : 
/etc/sysctl.conf 
net.ipv6.conf.all.disable_ipv6 = 1	#ipv6 disable
net.ipv6.conf.default.disable_ipv6 = 1	#ipv6 disable
net.ipv6.conf.lo.disable_ipv6 = 1	#ipv6 disable

iconv -c -f euc-kr -t utf-8 test.txt > test-utf8.txt # 인코딩 변환

  
   
 comm [옵션] [파일1] [파일2] # 파일간의 문자열 공통 행 찾기  
  -123 : 해당 필드를 감춘다. 	 # 파일간의 문자열 공통 행 찾기  
   
 cmp [-l][-s] 파일1 파일2 # 파일간의 문자열     byte by byte 또는 character by character로 파일을 
                                    # 파일간의 문자열  비교하는 유틸리티(틀리는 행과 틀리는 문자의 개수를 표시)  
  -l : 상이한 모든 바이트에 대한 정보 출력 	# 파일간의 문자열
  -s : 두 파일간 비교휴 메시지를 출력하지 않고 종료  # 파일간의 문자열
   
 diff [옵션] [파일1] [파일2] : 	# 파일간의 문자열 두 텍스트 파일의 차이(내용)를 검색 출력한다.  
  -e : # 파일간의 문자열 파일1의 내용을 파일2가 가리키는 내용으로 변경 
  -b : # 파일간의 문자열 [tab] 문자, 단어사이의 공백, 행 끝부분에 있는 공백문자를 무시하고 이때 
        시작하는 처음 공백은 제외되므로 검색된다. 
  -r : # 파일간의 문자열 파일1과 파일2가 디렉토리인 경우 순환적인 방법으로 비교 
   
 bdiff # 파일간의 문자열 파일1 파일2 [라인수][옵션] : 두 개의 큰 파일간의 차이점을 비교하는 명령어로, 
                                           # 파일간의 문자열  파일의 크기가 큰 파일을 비교하는 경우 사용  
  -s :  # 파일간의 문자열 bdiff 결과 출력시 메시지는 출력하지 않는다.
  -n : # 파일간의 문자열 bdiff  n은 라인수이며, 디폴트는 3,500이 된다. # 파일간의 문자열 bdiff
   
 sdiff [옵션] 파일1 파일2 : 두 파일간에 서로 다른 라인을 출력하는 명령어  
  -l : 	# 파일간의 문자열 비교되는 두 파일 중에서 내용이 같으면 첫 파일만 표시해준다. 
  -s : 	# 파일간의 문자열 비교되는 라인이 같으면 출력하지 않는다. 
  -w : 	# 파일간의 문자열 수 출력하는 라인 폭을 지정한다. 디폴트는 130자이

sshfs user@ip:~/folder ~/folder # 네트워크 혹은 로컬 상의 폴더 마운트  

vi -c "%g/찾을문자열/d" -c "wq" filename # 해당 문자열이 있는 라인 전부 삭제 

#time, date : date , sudo date -s 'yyyy-mmmm-dd tt-tt-tt' ; , rdate 
# sed -e 'd' file : file의 모든행 삭제
# sed -e '1d' file : file의 1행 삭제
# sed -i 's/1234/xxxx/g' file : file의 1234 문자열 을 xxxx로 변환 
sed '/test/d' 1.html : # test 문자가 포함된 줄을 삭제하여 출력한다.

sed '/text/!d' 1.html : # text 문자가 있는 줄만 지우지 않는다.

sed '1,2d' 1.html : # 처음 1줄, 2줄을 지운다.

sed '/^$/d' 1.html : # 공백라인을 삭제하는 명령이다. 

find . -name '*.tmp' -exec rm {} \;  # 본 디렉터리내의 하위 디렉토리들 중에서 *.tmp 파일을 찾아 삭제

#$RANDOM 은 bash 내부 함수(상수가 아님)로 0에서 32767사이의 의사난수를 리턴.   
# gpg file encrypt: gpg --output <outfilename> --encrypt --recipient <KEY> <originFILE>  
# gpg file decrypt: gpg --output <outFILE> --decrypt <origFILE> 
mount --bind [원본 디렉토리] [붙일 디렉토리] # folder mount

ls | grep --color name  # ls filename float color 

nl file # file read with line number display 

convmv -f euc-kr -t utf-8 --notest a.txt d # 인코딩 파일 이름 변경

cat my_file.txt | grep text # 파일 내용 중 text만 출력 

$ dpkg -i 패키지.deb # 패키지 설치
$ dpkg -P # 패키지 제거

$ dpkg -l     (소문자 L 임) # 설치된 패키지 리스트
$ dpkg -l openssh-server #설치된 패키지 리스트
$ dpkg -l | grep ssh # 설치된 패키지 리스트

$ dpkg -L openssh-server # 설치된 패키지에 포함된 파일들 보기

$ dpkg -c 패키지.deb # deb 파일 패키지에 포함된 파일들 보기

$ dpkg -I 패키지.deb # deb 파일 정보 보기

$ dpkg -S /usr/sbin/sshd # 파일이 포함된 패키지 이름 알아내기

uniq -u # 중복된 라인을 모두 제거하고 하나의 라인만 표시한다.

sudo dpkg --configure -a --force-all # dpkg fix


gksu  		# 그래픽컬 sudo. -u 명령으로 사용자를 지정할수가 있다.

exo-open --launch FileManager # file manager open in the terminal 

mkdir debian/missing-sources    #lintian.... source is missing 


echo "abc,def" | tr "a" "f"	# 문자 'a'를 'f'로 변경


echo "abc,def,ghi" | tr -d "[a-z]"	# 알파벳 소문자를 모두 삭제(-d 옵션)


echo "abc,def,ghi" | tr "," "\n"	# 쉼표를 줄바꿈(\n)으로 변경
abc	# 쉼표를 줄바꿈(\n)으로 변경
def	# 쉼표를 줄바꿈(\n)으로 변경
ghi	# 쉼표를 줄바꿈(\n)으로 변경

cat my_file.txt | tr "\n" "\t"	# 쉼표를 줄바꿈(\n)으로 변경
name: john  phone: 010-123-4556    name: jane ...		# 쉼표를 줄바꿈(\n)으로 변경
출처:[bash: tr, sed] # 쉼표를 줄바꿈(\n)으로 변경

sed '/[Tt]est/d'  	# Test 또는 test를 포함하는 모든 라인들을 삭제

cat my_file.txt | tr "\n" "\t" | sed 's/\tname:/\nname:/g' 		# 각 항목별로 줄바꿈
name: john  phone: 010-12304556	# 각 항목별로 줄바꿈
name: jane  phone: 010-345-1234	# 각 항목별로 줄바꿈


 tar -cvzf # 압축

cat   /home/test/aaa  |  wc   -w  # 파일 속 단어수 확인
cat   /home/test/aaa  |  wc   -l    # 파일 속 줄 수 확인 

rpm -Uvh [package] # redhot 관련 rpm 설치 명령 

rpm -qa [package] # 해당 rpm 패키지가 인스톨 되어 있는지를 확인

rpm -e [package]	# 해당 rpm 패키지를 삭제 


mkfs -t ext2 /dev/fd0 1440 # 해당 플로피 디스크를 ext2 타입으로 파일시스템 포맷을 진행

dd if=/boot/vmlinuz of=/dev/fd0 bs=8192 # 부트로더를 플로피 디스크0에 쓴다.

gunzip document.txt.gz # gz파일을 풀때 사용한다.

bunzip2	# bz2 파일을 풀때 사용한다.

tar -xvzf cf.gz -C cf1 # cf.gz 파일을 cf1 폴더에 압축을 해제 한다. 

VBoxManage convertfromraw xubuntu-15.10-desktop-amd64.iso make.vdi # 

freshclam # clamav update

clamscan -r \home # clamav scan \home

clamscan -r /home -l clamscan.log # 검사기록을 clamscan.log 파일로 저장한다.

clamscan -r /home --move=DIRECTORY # 감염된 파일들을 DIRECTORY 로 이동 시킨다.

sudo update-alternatives -–config default.plymouth # theme 선택 -> sudo update-initramfs -u # 변경 

ccd2iso name-of-file.img name-of-file.iso	# img to iso

sudo javaws ./<파일명>.jnlp # jnlp 파일 실행 

ffmpeg -i YOURVIDEOFILE.mp4 -r 10 -s 711×400 /tmp/gif/out%04d.gif  # mp4 영상 파일을 gif로

gifsicle –delay=10 –loop /tmp/gif/*.gif > animation.gif	# gif 파일들을 하나의 gif 파일로 묶음

convert -layers Optimize animation.gif animation_optimized.gif  # 용량을 최적화 시켜 gif 파일을 재구축 

lsof | grep snd # 사운드(sound) 출력 확인

rm ~/.pulse/*	# 잡음 제거

sudo pm-suspend # 절전 모드

sudo pm-hibernate # 최대 절전 모드 

parted /dev/sd? resizepart 2 (partition num) # resize partition 

sudo sed -i 's/enabled=1/enabled=0/g' etc/default/apport # 오류 보고 끄기

# hwp to txt > sudo pip install pyhwp > hwp5txt *.hwp # hwp파일을 txt파일로 변환

hdparm -m16 --yes-i-know-what-i-am-doing  /dev/sda # harddisk setting

sudo mv *.ttf /usr/share/fonts/freefonts ￫ sudo fc-cache -f -v 	# font update

mkfs.vfat -F 32 /dev/sda1 ￫ mount -t vfat /dev/sda1 /media/disk	# fat32 file system 만들기 

## espeak

apt install espeak espeakedit ￫  $ espeak -v ko "~" -w 1.wav  ## espeak use

curlftpfs -o user=ID:PASSWORD -o codepage=euc-kr -o allow_other ftp://${ftp_server_ip} /mnt/${target_dir} # ftp mount 

fuser -ck /mnt/${target_dir}; umount /mnt/${target_dir}	# fuser unmount 

## ftp mount 

mount -t cifs //192.168.0.100/1x /mnt/1x -o username=_user,password=_pwd,iocharset=utf8,rw	# ftp mount direct

sudo echo "//192.168.0.100/mnt_source /mnt/mnt_point cifs username=_user,pass=_pwd,rw,ver=1,iocharset=utf8,domain=embeded 0 0" >> /etc/fstab

- mkdir -p /mnt/mnt_point

- mnt /mnt/mnt_point (또는 mount -a)

- umount /mnt/mnt_point

## kompozer install

sudo apt-get install libatk1.0-0 libc6 libcairo2 libfontconfig1 libfreetype6 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk2.0-0  libidl0 libnspr4 libnss3 libpango1.0-0 libpng12-0 libstdc++6 libx11-6 libxft2 libxinerama1 libxrender1 libxt6 zlib1g
wget https://launchpad.net/ubuntu/+archive/primary/+files/kompozer-data_0.8%7Eb3.dfsg.1-0.1ubuntu2_all.deb
wget https://launchpad.net/ubuntu/+archive/primary/+files/kompozer_0.8%7Eb3.dfsg.1-0.1ubuntu2_amd64.deb
sudo dpkg -i kompozer-data_0.8~b3.dfsg.1-0.1ubuntu2_all.deb
sudo dpkg -i kompozer_0.8~b3.dfsg.1-0.1ubuntu2_amd64.deb

## google-drive-ocamlfus install

sudo add-apt-repository ppa:alessandro-strada/ppa -y 
sudo apt-get update
sudo apt-get install google-drive-ocamlfuse -y
sudo sh -c 'echo "PATH=$PATH:$HOME/.opam/system/bin 
export PATH" >> ~/.bashrc'
source ~/.bashrc
google-drive-ocamlfus ~/gd


## exfat setting

sudo apt-get update
sudo apt-get install exfat-utils fuse-exfat -y
sudo mv /lib64/libblkid.so.1.1.0 /lib64/libblkid.so.1.1.0.backup
sudo cp shlibs/blkid/src/.libs/libblkid.so.1.1.0 /lib64/
sudo chmod 644 /lib/libblkid.so.1.1.0
sudo rm /lib/libblkid.so.1
sudo ln -s /lib/libblkid.so.1.1.0 /lib/libblkid.so.1

## 한글 언어팩 설치

apt-get install language-pack-ko
locale-gen ko_KR.UTF-8
touch /etc/default/locale

## github upload
git config --global user.email you@example.com # git config (설정)
git config --global user.name Your Name# git config (설정)
git init
git remote add pi https://github.com/cosmosproject15/pi.git
git add .
git commit -m {커밋-메시지}
git pull {저장소-이름} master
git push {저장소-이름} master

echo "($RANDOM % 44) + 1 | bc  # 1~44 까지 random한 숫자 출력
awk '{print }' b1  # b1 파일의 첫번째 열 출력

ffmpeg -i filename.m4a -acodec libmp3lame -ab 320k filename.mp3   # m4a to mp3 by ffmpeg
ar vx mypackage.deb   # deb 압축 풀기
gpg --gen-key# gpg키를 만든다.
gpg --armor --import cosmosproject15.asc     # import gpg key 
gpg --decrypt --recipient{key} file     # decrypt file by gpg key 

ffmpeg -i filename.m4a -acodec libmp3lame -ab 320k filename.mp3   # m4a to mp3 by ffmpeg # ffmpeg를 이용한 m4a파일을 mp3로 변환
ar vx mypackage.deb   # deb 압축 풀기
gpg --gen-key# gpg키를 만든다.
gpg --armor --import cosmosproject15.asc     # import gpg key 
gpg --decrypt --recipient{key} file     # decrypt file by gpg key 
shc -f [bashfile]	# bash shell c compile , 쉘립트를 c언어로 컴파일
anser	# 답
1212	# das
sudo mount -o loop file.nrg folder/	# NRG FILE MOUNT , nrg파일을 마운트
nrg2iso	# nrg file to iso convert
/etc/services	# linux sevices list, 리눅스 서비스 목록이 있는 파일
sudo ufw allow 22/tcp	# 22 port allow, ufw 방화벽22번 포트만 허가
sudo apt-get install vino ; vino-preference ; /usr/lib/vino/vino-server -> autostart ; /etc/lightdm/lightdm.conf -> autologin set ; mkdir ~/.gnome2/ketrings ; echo 'passwd' |base64 > default.keyring	# vino server setting, 원격 제어모듈 vino 서버 셋팅

python -m py_compile c.py	# 파이썬 컴파일 

sudo apt-get install fbi -y	# 콘솔 환경에서 사진 보는 프로그램 fbi

fbi -a 1.png	# 다른 tty에서 fbi 구현

sudo fbi -a -T 1 1.png	# 관리자 권한으로 fbi 구현

sudo apt-get install tuxguitar tuxguitar-jsa fluid-soundfont-gm timidity -y	# timidity tuxguitar에 설치로 미디 서버 구현

sudo dcfldd if=/dev/zero |pv| sudo dcfldd of=/dev/sdc?	# 현황을 보면서 포맷

sudo badblocks -w -c 600 /dev/sdx	# 하드디스크 완전 삭제 방법

timidity -iA -Os	# timidity 리셋

sudo vboxmanage internalcommands createrawvmdk -filename backup.vmdk -rawdisk /dev/sdx	# 물리디스크 연동 vmdk 파일 만들기

grep -A 5 -B 5 "text" file	# 해당 파일에 대한 "text" 주위의 자료들( 이전 5라인, 이후 5라인)도 같이 출력 한다.  



